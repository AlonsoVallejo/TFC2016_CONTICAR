#include "DC_Motors_Control.h"

/********************************************************************************
						Variables uses to the dc motors control
********************************************************************************/ 
float  DC_error; // error value for the control

 int DC_PWM_R_1, //Values for the right and left dc motors.
			 DC_PWM_L_1,
			 DC_PWM_R_2, 
			 DC_PWM_L_2,
			 DC_PWM_R,
			 DC_PWM_L; 

unsigned int PWM_MAX_MOTORS_H,
			 brake_delay = 0;
             
unsigned int sp_pwm_r,
			 sp_pwm_l,
			 wait_next_sample = 50,
			 L_ppp,
			 R_ppp,
			 smithiwemberyeguermanllensen,
			 smithi;
			 
int diff_pwm_r,
	diff_pwm_l,
	pwm_r_accel,
	pwm_l_accel,
	pwm_r_brake,
	pwm_l_brake;             
	
#define ERROR_MAX			1.0
#define ERROR_MIN			-1.0
#define MOTORS1_MIN_SPEED	0
#define MOTORS2_MIN_SPEED	255

#define min_zeros_track		35
#define max_zeros_track		50

/********************************************************************************
						This function has the algorithm control to
						control the dc motors.
********************************************************************************/ 
void DC_MOTORS_CONTROL(void)
{
	DC_DP_parameters_test();
	PUSH_BUTTON_TASK();
	DC_error=error*3.333;
	if(DC_error > ERROR_MAX)      DC_error = ERROR_MAX;
	else if(DC_error < ERROR_MIN) DC_error = ERROR_MIN;
	
	if(DC_error <= 0)   //spin to right
	{
		sp_pwm_r = PWM_MAX_MOTORS_H + (PWM_MAX_MOTORS_H*DC_error*smithiwemberyeguermanllensen);    //--
		sp_pwm_l = PWM_MAX_MOTORS_H + (PWM_MAX_MOTORS_H*DC_error*smithi*(-1));      //++
	}
	else                            //spin to left
	{
		sp_pwm_r = PWM_MAX_MOTORS_H - (PWM_MAX_MOTORS_H*DC_error*smithi*(-1));      //++
		sp_pwm_l = PWM_MAX_MOTORS_H - (PWM_MAX_MOTORS_H*DC_error*smithiwemberyeguermanllensen);    //--
	}	
	
	DC_MOTORS();
	//PTA13_TEST_LOW;
}

/********************************************************************************
						This function contains the different behavior
						of the car.
********************************************************************************/ 

void DC_MOTORS(void)
{
	diff_pwm_r = sp_pwm_r - right_tire_value;
	diff_pwm_l = sp_pwm_l - left_tire_value;
	
	if(finish_flag== 1) // stop the car with the camera
	{
		LEDS_CAMERA_VALUE(7500);
		if(brake_delay > 40) stop_car();
		brake_delay = brake_delay + 1;
	}
	else if (count_buttonA == 0) stop_car();
	
	else if(count_buttonA == 1)
	{
		if(sampling_speed >= samples_number_ss /*|| wait_next_sample <=50*/)
		{
			if(diff_pwm_r >= 0 ) // right tire needs accel
			{
				pwm_r_accel = sp_pwm_r + diff_pwm_r;
				DC_PWM_R = pwm_r_accel;
			}
			else if(diff_pwm_r < 0) // right tire needs brake
			{
				pwm_r_brake = 255 - (-1*diff_pwm_r);
				DC_PWM_R = sp_pwm_r + diff_pwm_r;
			}
	
			if(diff_pwm_l >= 0 ) // left tire needs accel
			{
				pwm_l_accel = sp_pwm_l + diff_pwm_l;
				DC_PWM_L = pwm_l_accel;		
			}
			else if(diff_pwm_l < 0) // left tire needs brake
			{
				pwm_l_brake = 255 - (-1*diff_pwm_l);
				DC_PWM_L = sp_pwm_l + diff_pwm_l;
			}
		}
	wait_next_sample++;
	if(wait_next_sample >=100) wait_next_sample = 50;
	DC_MOTORS_SPEED();
	reset_values();
	}
}


/********************************************************************************
						This function receives the final velocity 
						parameters to control the tires of the car.
********************************************************************************/ 

void DC_MOTORS_SPEED(void)
{
	DC_PWM_L_1 = DC_PWM_L;
	DC_PWM_R_1 = DC_PWM_R;
	DC_PWM_R_2 = pwm_r_brake;
	DC_PWM_L_2 = pwm_l_brake;
	
	
	if (DC_PWM_R_1>255) DC_PWM_R_1 =255;
	if (DC_PWM_L_1>255) DC_PWM_L_1 =255;
	
	//non-short circuit
	if(DC_PWM_R_2 <= DC_PWM_R_1) DC_PWM_R_2=DC_PWM_R_1 + 2;
	if(DC_PWM_R_2 > 255) DC_PWM_R_2=255;
	if(DC_PWM_L_2 <= DC_PWM_L_1) DC_PWM_L_2=DC_PWM_L_1 + 2;
	if(DC_PWM_L_2 > 255) DC_PWM_L_2=255;
	
	MOTOR1_R_SPEED(DC_PWM_R_1);
	MOTOR1_L_SPEED(DC_PWM_L_1);

	MOTOR2_R_SPEED(DC_PWM_R_2);
	MOTOR2_L_SPEED(DC_PWM_L_2);
	
	pwm_r_brake = 255;
	pwm_l_brake = 255;
}

/********************************************************************************
						This function contains the different velocities
						of the car.
********************************************************************************/ 

void DC_DP_parameters(void)
{
        switch ((DIP_SW_VAL() & 0xC) >> 2) 
        {
                case 0: // funcional
                    LEDS_VEL_STATE_0;
                    PWM_MAX_MOTORS_H =(110); //0.2
                    smithiwemberyeguermanllensen=0;
                    smithi = 0;
                    break;                                  
                       
                case 1:
                	LEDS_VEL_STATE_1;
                	PWM_MAX_MOTORS_H =(110);
                	smithiwemberyeguermanllensen=0.2;
                	smithi= 0;
                	break;                         
                case 2:
                	LEDS_VEL_STATE_2;
                	PWM_MAX_MOTORS_H =(110);
                	smithiwemberyeguermanllensen=0.4;
                	smithi= 0;
                	break;                        
                case 3:
                	LEDS_VEL_STATE_3;
                	PWM_MAX_MOTORS_H =(110);
                	smithiwemberyeguermanllensen=0.6;
                	smithi= 0;
                	break;                      
                default:
                	break;
        }
 }

/********************************************************************************
						HEROE
********************************************************************************/ 
void stop_car(void)
{
	MOTOR1_R_SPEED(MOTORS1_MIN_SPEED);
	MOTOR1_L_SPEED(MOTORS1_MIN_SPEED);

	MOTOR2_R_SPEED(MOTORS2_MIN_SPEED);
	MOTOR2_L_SPEED(MOTORS2_MIN_SPEED);
	
}
/********************************************************************************
						HEROE
********************************************************************************/ 

void reset_values(void)
{
	if(sampling_speed >=samples_number_ss)
	{
		R_ppp=right_tire_pulses;
		right_tire_pulses = 0;
		L_ppp=left_tire_pulses;
		left_tire_pulses = 0;
		sampling_speed = 0;
	}
}

/********************************************************************************
						This function contains the different velocities
						of the car.
********************************************************************************/ 

void DC_DP_parameters_test(void)
{
        switch ((DIP_SW_VAL() & 0xC) >> 2) 
        {
                case 0: // funcional
                    LEDS_VEL_STATE_0;
                    MOTOR1_R_SPEED(50);
                    MOTOR1_L_SPEED(50);

                    MOTOR2_R_SPEED(255);
                   	MOTOR2_L_SPEED(255);
                    break;                                  
                       
                case 1:
                	LEDS_VEL_STATE_1;
                	MOTOR1_R_SPEED(70);
                	MOTOR1_L_SPEED(70);
                	
                	MOTOR2_R_SPEED(255);
                	MOTOR2_L_SPEED(255);
                	break;                         
                case 2:
                	LEDS_VEL_STATE_2;
                	MOTOR1_R_SPEED(90);
                	MOTOR1_L_SPEED(90);
                	
                	MOTOR2_R_SPEED(255);
                	MOTOR2_L_SPEED(255);
                	break;                        
                case 3:
                	LEDS_VEL_STATE_3;
                	MOTOR1_R_SPEED(110);
                	MOTOR1_L_SPEED(110);
                	
                	MOTOR2_R_SPEED(255);
                	MOTOR2_L_SPEED(255);
                	break;                      
                default:
                	break;
        }
 }


